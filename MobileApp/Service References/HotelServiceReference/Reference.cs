//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MobileApp.HotelServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/WCFhotell")]
    public partial class Service : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string noteField;
        
        private int roomIdField;
        
        private int statusField;
        
        private int typeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string note {
            get {
                return this.noteField;
            }
            set {
                if ((object.ReferenceEquals(this.noteField, value) != true)) {
                    this.noteField = value;
                    this.RaisePropertyChanged("note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int roomId {
            get {
                return this.roomIdField;
            }
            set {
                if ((this.roomIdField.Equals(value) != true)) {
                    this.roomIdField = value;
                    this.RaisePropertyChanged("roomId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HotelServiceReference.IHotelServices")]
    public interface IHotelServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHotelServices/GetServices", ReplyAction="http://tempuri.org/IHotelServices/GetServicesResponse")]
        System.IAsyncResult BeginGetServices(string serviceType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> EndGetServices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHotelServices/ChangeServiceStatus", ReplyAction="http://tempuri.org/IHotelServices/ChangeServiceStatusResponse")]
        System.IAsyncResult BeginChangeServiceStatus(string serviceID, string status, string note, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeServiceStatus(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHotelServicesChannel : MobileApp.HotelServiceReference.IHotelServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HotelServicesClient : System.ServiceModel.ClientBase<MobileApp.HotelServiceReference.IHotelServices>, MobileApp.HotelServiceReference.IHotelServices {
        
        private BeginOperationDelegate onBeginGetServicesDelegate;
        
        private EndOperationDelegate onEndGetServicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetServicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeServiceStatusDelegate;
        
        private EndOperationDelegate onEndChangeServiceStatusDelegate;
        
        private System.Threading.SendOrPostCallback onChangeServiceStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public HotelServicesClient() {
        }
        
        public HotelServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HotelServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HotelServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HotelServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetServicesCompletedEventArgs> GetServicesCompleted;
        
        public event System.EventHandler<ChangeServiceStatusCompletedEventArgs> ChangeServiceStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MobileApp.HotelServiceReference.IHotelServices.BeginGetServices(string serviceType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServices(serviceType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> MobileApp.HotelServiceReference.IHotelServices.EndGetServices(System.IAsyncResult result) {
            return base.Channel.EndGetServices(result);
        }
        
        private System.IAsyncResult OnBeginGetServices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serviceType = ((string)(inValues[0]));
            return ((MobileApp.HotelServiceReference.IHotelServices)(this)).BeginGetServices(serviceType, callback, asyncState);
        }
        
        private object[] OnEndGetServices(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> retVal = ((MobileApp.HotelServiceReference.IHotelServices)(this)).EndGetServices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServicesCompleted(object state) {
            if ((this.GetServicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServicesCompleted(this, new GetServicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServicesAsync(string serviceType) {
            this.GetServicesAsync(serviceType, null);
        }
        
        public void GetServicesAsync(string serviceType, object userState) {
            if ((this.onBeginGetServicesDelegate == null)) {
                this.onBeginGetServicesDelegate = new BeginOperationDelegate(this.OnBeginGetServices);
            }
            if ((this.onEndGetServicesDelegate == null)) {
                this.onEndGetServicesDelegate = new EndOperationDelegate(this.OnEndGetServices);
            }
            if ((this.onGetServicesCompletedDelegate == null)) {
                this.onGetServicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetServicesDelegate, new object[] {
                        serviceType}, this.onEndGetServicesDelegate, this.onGetServicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MobileApp.HotelServiceReference.IHotelServices.BeginChangeServiceStatus(string serviceID, string status, string note, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeServiceStatus(serviceID, status, note, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MobileApp.HotelServiceReference.IHotelServices.EndChangeServiceStatus(System.IAsyncResult result) {
            return base.Channel.EndChangeServiceStatus(result);
        }
        
        private System.IAsyncResult OnBeginChangeServiceStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serviceID = ((string)(inValues[0]));
            string status = ((string)(inValues[1]));
            string note = ((string)(inValues[2]));
            return ((MobileApp.HotelServiceReference.IHotelServices)(this)).BeginChangeServiceStatus(serviceID, status, note, callback, asyncState);
        }
        
        private object[] OnEndChangeServiceStatus(System.IAsyncResult result) {
            bool retVal = ((MobileApp.HotelServiceReference.IHotelServices)(this)).EndChangeServiceStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeServiceStatusCompleted(object state) {
            if ((this.ChangeServiceStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeServiceStatusCompleted(this, new ChangeServiceStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeServiceStatusAsync(string serviceID, string status, string note) {
            this.ChangeServiceStatusAsync(serviceID, status, note, null);
        }
        
        public void ChangeServiceStatusAsync(string serviceID, string status, string note, object userState) {
            if ((this.onBeginChangeServiceStatusDelegate == null)) {
                this.onBeginChangeServiceStatusDelegate = new BeginOperationDelegate(this.OnBeginChangeServiceStatus);
            }
            if ((this.onEndChangeServiceStatusDelegate == null)) {
                this.onEndChangeServiceStatusDelegate = new EndOperationDelegate(this.OnEndChangeServiceStatus);
            }
            if ((this.onChangeServiceStatusCompletedDelegate == null)) {
                this.onChangeServiceStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeServiceStatusCompleted);
            }
            base.InvokeAsync(this.onBeginChangeServiceStatusDelegate, new object[] {
                        serviceID,
                        status,
                        note}, this.onEndChangeServiceStatusDelegate, this.onChangeServiceStatusCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MobileApp.HotelServiceReference.IHotelServices CreateChannel() {
            return new HotelServicesClientChannel(this);
        }
        
        private class HotelServicesClientChannel : ChannelBase<MobileApp.HotelServiceReference.IHotelServices>, MobileApp.HotelServiceReference.IHotelServices {
            
            public HotelServicesClientChannel(System.ServiceModel.ClientBase<MobileApp.HotelServiceReference.IHotelServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetServices(string serviceType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceType;
                System.IAsyncResult _result = base.BeginInvoke("GetServices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> EndGetServices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service> _result = ((System.Collections.ObjectModel.ObservableCollection<MobileApp.HotelServiceReference.Service>)(base.EndInvoke("GetServices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeServiceStatus(string serviceID, string status, string note, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = serviceID;
                _args[1] = status;
                _args[2] = note;
                System.IAsyncResult _result = base.BeginInvoke("ChangeServiceStatus", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndChangeServiceStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ChangeServiceStatus", _args, result)));
                return _result;
            }
        }
    }
}
